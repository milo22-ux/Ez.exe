local keys_url  = "https://pastebin.com/raw/ZwL9ABFQ"
local hwids_url = "https://pastebin.com/raw/UgeF3gJ3"
local times_url = "https://pastebin.com/raw/JkrsXZUe"

local function fetch(u)
    if syn and syn.request then return (syn.request({Url=u,Method="GET"}) or {}).Body end
    if http and http.request then return (http.request({Url=u,method="GET"}) or {}).Body end
    if request then return (request({Url=u,Method="GET"}) or {}).Body end
    if game and game.HttpGet then return game:HttpGet(u,true) end
    return ""
end

local function lines(t)
    local out={}
    for l in (t or ""):gmatch("[^\r\n]+") do table.insert(out,l:match("^%s*(.-)%s*$")) end
    return out
end

local keys  = lines(fetch(keys_url))
local hwids = lines(fetch(hwids_url))
local times = lines(fetch(times_url))

local key  = (type(getfenv)=="function" and getfenv().key) or _G.key
local hwid = gethwid()

local key_ok, hwid_ok, key_time = false,false,nil
local reason = {}

for i,k in ipairs(keys) do
    if k == key then
        key_ok = true
        local time_str = times[i]
        if time_str then
            local d,m,y = time_str:match("(%d+)%/(%d+)%/(%d+)")
            if d and m and y then
                key_time = os.time({day=tonumber(d),month=tonumber(m),year=tonumber(y),hour=23,min=59,sec=59})
                if os.time() > key_time then
                    table.insert(reason,"Key expired ("..time_str..")")
                end
            else
                table.insert(reason,"Invalid date format ("..time_str..")")
            end
        else
            table.insert(reason,"No expiration date for key")
        end
        break
    end
end

for _,h in ipairs(hwids) do
    if h == hwid then
        hwid_ok = true
        break
    end
end

if key_ok and hwid_ok and key_time and os.time() <= key_time then
    print("whitelisted")
    local seconds_left = key_time - os.time()
    local days = math.floor(seconds_left / 86400)
    local hours = math.floor((seconds_left % 86400)/3600)
    local minutes = math.floor((seconds_left % 3600)/60)
    local seconds = seconds_left % 60
    print(string.format("Time left: %d days %d hours %d minutes %d seconds",days,hours,minutes,seconds))
else
    local msg = "not whitelisted"
    if #reason>0 then
        msg = msg.." | "..table.concat(reason,", ")
    end
    print(msg)
    if key_time then
        local seconds_left = key_time - os.time()
        if seconds_left > 0 then
            local days = math.floor(seconds_left / 86400)
            local hours = math.floor((seconds_left % 86400)/3600)
            local minutes = math.floor((seconds_left % 3600)/60)
            local seconds = seconds_left % 60
            print(string.format("Time left: %d days %d hours %d minutes %d seconds",days,hours,minutes,seconds))
        else
            print("Time left: expired")
        end
    end
end
