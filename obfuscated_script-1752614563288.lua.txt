local key = getgenv().key or ""

local request = request or http_request or ((http and http.request) or (syn and syn.request))
if type(request) ~= "function" then error("Request function missing") end
if key == "" then error("Key not set") end

local function isValidResponse(body)
	local b = tostring(body):lower()
	b:find("ok") or b:find("valid")
end

local function getServerResponse(extra)
	local t = os.time()
	local url = ("http://whitelist-ivp4.vercel.app/api/vaildate?key=%s&t=%s%s"):format(key, t, extra or "")
	local success, response = pcall(function()
		request({ Url = url, Method = "GET" })
	end)
	if not success or not response or not response.Body then error("Failed server request") end
	tostring(response.Body)
end

local function runChecks()
	local responses = {}
	for i = 1, 10 do
		local param = (i % 3 == 0 and "&check=3") or (i % 2 == 0 and "&check=2") or ("&chk=" .. i)
		if i == 7 then param = "&keyrev=" .. key:reverse() end
		responses[i] = getServerResponse(param)
		if not isValidResponse(responses[i]) then
			error("Whitelist failed on check " .. i .. ": " .. responses[i])
		end
	end
	for i = 2, #responses do
		if responses[i] ~= responses[1] then error("Inconsistent server responses") end
	end
	if #key < 5 then error("Invalid key length") end

	print("✔️ Whitelist verified")
	loadstring(game:HttpGet("https://raw.githubusercontent.com/milo22-ux/Ez.exe/refs/heads/main/Whitelist", true))()
end

runChecks()
