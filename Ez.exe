--[[made by _milo22 on dsicord well know for making cheats and cheating on trident survival (2023) or trident survival v5 if you want to skid this cheat then pls give me credit if not then i will not be happy bit that will be fine with me i would do nothing about it anyways but i would be happy if u atleast gave me credit but if not that is complty fine btw i am 15 and taken so don't dm me to date you peace out]]--

-- Locals to call the ui
local DrRayLibrary = loadstring(game:HttpGet("https://raw.githubusercontent.com/AZYsGithub/DrRay-UI-Library/main/DrRay.lua"))()
--
local window = DrRayLibrary:Load("Ez bans.exe", "Default")
-- Combat
local tab = DrRayLibrary.newTab("Combat", "ImageIdHere")
tab.newButton("silent aim", "", function()
local modules = { ["Camera"] = {}, ["Player"] = {}, ["Character"] = {}, ["Inventory"] = {}, ["RangedWeapon"] = {}, ["BowSpecial"] = {}, ["FPS"] = {}, ["NetWork"] = {}, ["ClimbingPick"] = {}, ["BuildingTool"] = {}, ["Consumable"] = {}, ["Melee"] = {}, ["MiningDrill"] = {}, ["PlaceEntity"] = {}, ["PortableAnvil"] = {}, ["PortableWorkbench"] = {}, ["InputManager"] = {}, ["Particle"] = {}, ["Settings"] = {}, ["Sound"] = {}, ["UI"] = {}, }
for _, v in pairs(getgc(true)) do if typeof(v) == "function" and islclosure(v) then local info = debug.getinfo(v) local name = string.match(info.short_src, "%.([%w_]+)$") if name and modules[name] and info.name ~= nil then modules[name][info.name] = info.func end end end
local workspace,camera = cloneref(game:GetService("Workspace")), workspace.CurrentCamera
local UIS, RS, ReplicatedStorage = cloneref(game:GetService("UserInputService")), cloneref(game:GetService("RunService")), cloneref(game:GetService("ReplicatedStorage"))
local Fov, Sline = Drawing.new("Circle"), Drawing.new("Line")
local screenSize = camera.ViewportSize
local screenCenter = Vector2.new(screenSize.X / 2, screenSize.Y / 2)
Fov.Position = screenCenter Fov.Radius = 150 Fov.Color = Color3.fromRGB(255, 0, 255) Fov.Visible = true Sline.Color = Color3.fromRGB(255, 255, 255) Sline.Thickness = 1 Sline.Visible = true Sline.ZIndex = 1
local getclosest = function() local closestModel, closestData = nil, nil local closestMagnitude = math.huge local camera = workspace.CurrentCamera for _, v in pairs(debug.getupvalue(modules.Player.GetPlayerModel, 1) or {}) do if v.model:FindFirstChild("Head") and not v.sleeping then local pos, onScreen = camera:WorldToViewportPoint(v.model:GetPivot().Position) if onScreen then local magnitude = (Vector2.new(pos.X, pos.Y) - screenCenter).Magnitude local playerDistance = (workspace.Ignore.LocalCharacter.Middle:GetPivot().Position - v.model:GetPivot().Position).Magnitude if magnitude < Fov.Radius and playerDistance <= 9999 and magnitude < closestMagnitude then closestMagnitude = magnitude closestModel = v.model closestData = v end end end end return closestModel, closestData end
game:GetService("RunService").RenderStepped:Connect(function() getgenv().SilentTarget = getclosest() if getgenv().SilentTarget and getgenv().SilentTarget:FindFirstChild("Head") then local head_pos = getgenv().SilentTarget.Head.Position local screenPos, onScreen = camera:WorldToViewportPoint(head_pos) if onScreen then Sline.From = screenCenter Sline.To = Vector2.new(screenPos.X, screenPos.Y) Sline.Visible = true else Sline.Visible = false end else Sline.Visible = false end end)
local RunService, UserInputService, hue, speed = game:GetService("RunService"), game:GetService("UserInputService"), 0, 0.7 RunService.RenderStepped:Connect(function(dt) hue = (hue + (dt * speed * 100)) % 360 Fov.Color = Color3.fromHSV(hue / 360, 1, 1) end)  
local ProjectileDrop = function() local mod = modules.FPS.GetEquippedItem() if not mod or not mod.id then return 0, 0 end local itemConfig = require(game:GetService("ReplicatedStorage").ItemConfigs[mod.id]) return mod.id, itemConfig.ProjectileSpeed, itemConfig.ProjectileDrop end
local predict = function(p, e, s, d) local dt = (e - p).Magnitude local x = (math.pi * 2 - math.pi / 4) / 8 local t = dt / s local py = e.Y + (x * d * t) return Vector3.new(e.X, py, e.Z) end
local SilentAim = true
local oldfromOrientation; oldfromOrientation = hookfunction(CFrame.fromOrientation, newcclosure(function(p, y, r)
    if SilentAim and getgenv().SilentTarget and debug.info(3, "n") == "fire" then
        local id, speed, drop = ProjectileDrop()
        local targetHead = getgenv().SilentTarget.Head
        if targetHead then
            local origin = modules.Camera.GetCFrame()
            local Camera = game.workspace.CurrentCamera
            local cameraPosition = Camera.CFrame.Position
            local predictedPos = predict(origin.Position, targetHead.Position, speed, drop)
            if predictedPos then
                return Camera.CFrame:Inverse() * CFrame.lookAt(cameraPosition, predictedPos)
            end
        end
    end
    return oldfromOrientation(p, y, r)
end))
end)
--
tab.newToggle("Toggle hbe", "Toggle hbe (hitbox expander)", true, function(toggleState)
    Hitbox = toggleState 
end) 
tab.newSlider("hitbox size", "hitbox expander slider", 7, false, function(num)
    headsize = num
end)
--
local function modifyPlayerHeads()
    for i, v in next, game.Workspace:GetChildren() do
        if v.Name == "Model" and v:FindFirstChild("Head") then
            local head = v.Head
            if head then
                local success, _ = pcall(function()
                    head.Size = Vector3.new(headsize, headsize, headsize)
                    head.Transparency = 0.5
                end)
                if not success then
                    warn("Failed to modify head for player:", v.Name)
                end
            end
        end
    end
end
--
game:GetService("RunService").RenderStepped:Connect(function()
    if Hitbox then
        modifyPlayerHeads()
    end
end)
local deleteWallsEnabled = true

local Mouse = game.Players.LocalPlayer:GetMouse()

Mouse.Button1Down:Connect(function()
    if deleteWallsEnabled then
        if not Mouse.Target then return end

        local targetName = Mouse.Target.Name
        local allowedNames = {
            "Hitbox", "LeftWall", "RightWall",
            "LeftHinge", "Prim", "RightHinge"
        }

        for _, name in ipairs(allowedNames) do
            if targetName == name then
                Mouse.Target:Destroy()
                break
            end
        end
    end
end)

tab.newToggle("Delete Walls", "Enable/disable wall deletion on click", true, function(toggleState)
    deleteWallsEnabled = toggleState
end)
-- Visuals
local tab = DrRayLibrary.newTab("visuals", "ImageIdHere")
tab.newButton("esp", "", function()
local modules = { ["Player"] = {} }
local ESP_Boxes = {}
local ESP_Texts = {}
local cam = workspace.CurrentCamera
local rs = game:GetService("RunService")
--
for _, f in next, getgc(true) do
    if typeof(f) == "function" and islclosure(f) then
        local info = debug.getinfo(f)
        local src = info and info.short_src
        if src then
            local mod = src:match("%.([%w]+)$")
            if mod and modules[mod] and info.name and info.name ~= "" then
                modules[mod][info.name] = f
            end
        end
    end
end
--
local visioncore = {
    modules = modules
}
--
function visioncore:GetPlayers()
    local players = {}
    for _, v in next, debug.getupvalue(self.modules.Player.GetPlayerModel, 1) do
        if v and v.model and v.model:FindFirstChild("Head") and not v.sleeping then
            table.insert(players, v)
        end
    end
    return players
end
--
function visioncore:CreateDrawing(class, props)
    local drawing = Drawing.new(class)
    for prop, val in next, props do
        drawing[prop] = val
    end
    return drawing
end
--
function visioncore:SetupESP(player)
    ESP_Boxes[player.id] = self:CreateDrawing("Square", {
        Thickness = 2,
        Color = Color3.fromRGB(255, 255, 255), 
        Filled = false,
        Visible = false
    })
--
    ESP_Texts[player.id] = self:CreateDrawing("Text", {
        Text = "",
        Size = 17,
        Color = Color3.fromRGB(255, 255, 255),
        Outline = true,
        OutlineColor = Color3.fromRGB(0, 0, 0),
        Center = true,
        Visible = false
    })
end
--
function visioncore:HideESP(id)
    if ESP_Boxes[id] then ESP_Boxes[id].Visible = false end
    if ESP_Texts[id] then ESP_Texts[id].Visible = false end
end
--
function visioncore:UpdateESP()
    local players = self:GetPlayers()
    local ids = {}
--
    for _, v in next, players do
        ids[v.id] = true
        if not ESP_Boxes[v.id] or not ESP_Texts[v.id] then
            self:SetupESP(v)
        end
--
        local head = v.model:FindFirstChild("Head")
        local torso = v.model:FindFirstChild("Torso") or head
--
        if torso then
            local screenPos, onScreen = cam:WorldToViewportPoint(torso.Position)
            local modelSize = v.model:GetExtentsSize()
            local width = modelSize.X * 5
            local height = modelSize.Y * 5
--
            local box = ESP_Boxes[v.id]
            local text = ESP_Texts[v.id]
--
            local pos = Vector2.new(screenPos.X - width / 2, screenPos.Y - height / 2)
            --
            box.Position = pos
            box.Size = Vector2.new(width, height)
            box.Visible = onScreen

            text.Text = (v.equippedItem and v.equippedItem.id or "None") .. " [" .. math.floor((cam.CFrame.Position - torso.Position).Magnitude) .. "]"
            text.Position = Vector2.new(screenPos.X, screenPos.Y + height + 10)
            text.Visible = onScreen
        else
            self:HideESP(v.id)
        end
    end
--
    for id, _ in next, ESP_Boxes do
        if not ids[id] then
            self:HideESP(id)
            ESP_Boxes[id] = nil
            ESP_Texts[id] = nil
        end
    end
end
--
rs.RenderStepped:Connect(function()
    visioncore:UpdateESP()
end)
end)
-- Xray
local antixray
antixray = hookmetamethod(game, "__newindex", function(self, key, value)
    if not checkcaller() and key == "Transparency" and self.Name == "Hitbox" then
        return 
    end
    return antixray(self, key, value)
end)
--
local CurrentSliderValue = 0.5
--
tab.newSlider("Xray Transparency", "Adjust hitbox transparency", 100, false, function(val)
    CurrentSliderValue = val / 100
end)
--
tab.newToggle("Xray Toggle", "Toggle visibility of player hitboxes", false, function(state)
    for _, v in pairs(game:GetService("Workspace"):GetChildren()) do
        if v:FindFirstChild("Hitbox") then
            v.Hitbox.Transparency = state and CurrentSliderValue or 0
        end
    end
end)
-- dw lil kid ik you skid
    local tab = DrRayLibrary.newTab("extra", "ImageIdHere")
local ScreenGui = Instance.new("ScreenGui")
local AutoRunButton = Instance.new("TextButton")
local Frame = Instance.new("Frame")

ScreenGui.Parent = game:GetService("CoreGui")
ScreenGui.Name = "AutoRunGui"

Frame.Size = UDim2.new(0, 100, 0, 80)
Frame.Position = UDim2.new(0, 10, 1, -150)
Frame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
Frame.Active = true
Frame.Draggable = true
Frame.Parent = ScreenGui

AutoRunButton.Size = UDim2.new(1, 0, 1, 0)
AutoRunButton.Text = "Auto slide jump run"
AutoRunButton.Parent = Frame
AutoRunButton.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
AutoRunButton.TextColor3 = Color3.fromRGB(255, 255, 255)
AutoRunButton.BorderSizePixel = 0

Frame.Visible = false

tab.newToggle("Slide Jump Toggle", "Toggle slide jump UI", true, function(toggleState)
    Frame.Visible = toggleState
end)

local isAutoRunning = false
local stopAutoRun = false

local function AutoRunAndJumpCrouch()
    while isAutoRunning do
        if stopAutoRun then break end
        keypress(0x57)
        keypress(0x10)
        task.wait(0.05)
        keypress(0x43)
        keypress(0x20)
        keyrelease(0x20)
        task.wait(0.5)
        keyrelease(0x43)
        keyrelease(0x10)
        wait(1.2)
    end
end

AutoRunButton.MouseButton1Click:Connect(function()
    if not isAutoRunning then
        isAutoRunning = true
        stopAutoRun = false
        AutoRunButton.Text = "Stop slide jump run"
        task.spawn(AutoRunAndJumpCrouch)
    else
        isAutoRunning = false
        stopAutoRun = true
        keyrelease(0x57)
        keyrelease(0x10)
        keyrelease(0x43)
        AutoRunButton.Text = "Auto slide jump run"
    end
end)

local function createDraggableButton(name, position, callback)
    local gui = Instance.new("ScreenGui")
    local button = Instance.new("TextButton")
    local dragging, dragInput, dragStart, startPos

    gui.Parent = game.CoreGui
    gui.Name = name .. "Gui"
    gui.ResetOnSpawn = false

    button.Parent = gui
    button.Size = UDim2.new(0, 100, 0, 30)
    button.Position = position
    button.BackgroundColor3 = Color3.fromRGB(80, 80, 80)
    button.TextColor3 = Color3.new(1, 1, 1)
    button.Text = name
    button.Visible = false

    button.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            dragStart = input.Position
            startPos = button.Position
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)

    button.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement then
            dragInput = input
        end
    end)

    game:GetService("UserInputService").InputChanged:Connect(function(input)
        if input == dragInput and dragging then
            local delta = input.Position - dragStart
            button.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
        end
    end)

    button.MouseButton1Click:Connect(callback)

    return button
end


local lootButton = createDraggableButton("Loot All", UDim2.new(0, 100, 1, -100), function()
    for i = 1, 20 do
        game:GetService("Players").LocalPlayer.RemoteEvent:FireServer(12, i, true)
        wait(0.03)
    end
end)

tab.newToggle("Loot All Toggle", "Show/hide Loot All button", false, function(toggleState)
    lootButton.Visible = toggleState
end)

local depositButton = createDraggableButton("Deposit All", UDim2.new(0, 210, 1, -100), function()
    for i = 1, 20 do
        game:GetService("Players").LocalPlayer.RemoteEvent:FireServer(12, i, false)
        wait(0.03)
    end
end)

tab.newToggle("Deposit All Toggle", "Show/hide Deposit All button", false, function(toggleState)
    depositButton.Visible = toggleState
end)
-- Hitsounds
local tab = DrRayLibrary.newTab("hitsounds", "ImageIdHere")
local SoundService = game:GetService("SoundService")
--
local sounds = {
    ["Defualt Headshot"] = "rbxassetid://9119561046",
    ["Defualt Body"] = "rbxassetid://9114487369",
    Neverlose = "rbxassetid://8726881116",
    Gamesense = "rbxassetid://4817809188",
    One = "rbxassetid://7380502345",
    Bell = "rbxassetid://6534947240",
    Rust = "rbxassetid://1255040462",
    TF2 = "rbxassetid://2868331684",
    Slime = "rbxassetid://6916371803",
    ["Among Us"] = "rbxassetid://5700183626",
    Minecraft = "rbxassetid://4018616850",
    ["CS:GO"] = "rbxassetid://6937353691",
    Saber = "rbxassetid://8415678813",
    Baimware = "rbxassetid://3124331820",
    Osu = "rbxassetid://7149255551",
    ["TF2 Critical"] = "rbxassetid://296102734",
    Bat = "rbxassetid://3333907347",
    ["Call of Duty"] = "rbxassetid://5952120301",
    Bubble = "rbxassetid://6534947588",
    Pick = "rbxassetid://1347140027",
    Pop = "rbxassetid://198598793",
    Bruh = "rbxassetid://4275842574",
    Bamboo = "rbxassetid://3769434519",
    Crowbar = "rbxassetid://546410481",
    Weeb = "rbxassetid://6442965016",
    Beep = "rbxassetid://8177256015",
    Bambi = "rbxassetid://8437203821",
    Stone = "rbxassetid://3581383408",
    ["Old Fatality"] = "rbxassetid://6607142036",
    Click = "rbxassetid://8053704437",
    Ding = "rbxassetid://7149516994",
    Snow = "rbxassetid://6455527632",
    Laser = "rbxassetid://7837461331",
    Mario = "rbxassetid://2815207981",
    Steve = "rbxassetid://4965083997",
}
local currentSound = nil
--
local function ApplySound(assetId)
    if not SoundService:FindFirstChild("PlayerHitHeadshot") then
        warn("SoundService.PlayerHitHeadshot not found!")
        return
    end
    local headshotSound = SoundService.PlayerHitHeadshot
    headshotSound.SoundId = assetId
    headshotSound.Volume = 5
    headshotSound.Pitch = 1
--
    local equalizer = headshotSound:FindFirstChildWhichIsA("EqualizerSoundEffect")
    if equalizer then
        equalizer.HighGain = -1.5
    end
end
--
local function ResetSound()
    if not SoundService:FindFirstChild("PlayerHitHeadshot") then
        return
    end
    local headshotSound = SoundService.PlayerHitHeadshot
    headshotSound.SoundId = "rbxassetid://9119561046" -- Default headshot sound
    headshotSound.Volume = 1
    headshotSound.Pitch = 1
--
    local equalizer = headshotSound:FindFirstChildWhichIsA("EqualizerSoundEffect")
    if equalizer then
        equalizer.HighGain = 0
    end
end
--
for name, assetId in pairs(sounds) do
    tab.newToggle(name, "Toggle " .. name .. " sound on/off", false, function(toggleState)
        if toggleState then
            currentSound = assetId
            ApplySound(assetId)
            print("Enabled sound:", name)
        else
            if currentSound == assetId then
                ResetSound()
                print("Reset sound back to default")
            end
        end
    end)
end
-- sky boxes
local tab = DrRayLibrary.newTab("sky box", "ImageIdHere")
local Lighting = game:GetService("Lighting")
--
local Sky = Instance.new("Sky")
Sky.Name = "CustomSky"
Sky.Parent = Lighting
--
local SkyBoxes = {
  ["Standard"] = {
    ["SkyboxBk"] = Sky.SkyboxBk, ["SkyboxDn"] = Sky.SkyboxDn,
    ["SkyboxFt"] = Sky.SkyboxFt, ["SkyboxLf"] = Sky.SkyboxLf,
    ["SkyboxRt"] = Sky.SkyboxRt, ["SkyboxUp"] = Sky.SkyboxUp
  },
  ["Among Us"] = {
    ["SkyboxBk"] = "rbxassetid://5752463190", ["SkyboxDn"] = "rbxassetid://5752463190",
    ["SkyboxFt"] = "rbxassetid://5752463190", ["SkyboxLf"] = "rbxassetid://5752463190",
    ["SkyboxRt"] = "rbxassetid://5752463190", ["SkyboxUp"] = "rbxassetid://5752463190"
  },
  ["Spongebob"] = {
    ["SkyboxBk"]="rbxassetid://277099484", ["SkyboxDn"]="rbxassetid://277099500",
    ["SkyboxFt"]="rbxassetid://277099554", ["SkyboxLf"]="rbxassetid://277099531",
    ["SkyboxRt"]="rbxassetid://277099589", ["SkyboxUp"]="rbxassetid://277101591"
  },
  ["Deep Space"] = {
    ["SkyboxBk"]="rbxassetid://159248188", ["SkyboxDn"]="rbxassetid://159248183",
    ["SkyboxFt"]="rbxassetid://159248187", ["SkyboxLf"]="rbxassetid://159248173",
    ["SkyboxRt"]="rbxassetid://159248192", ["SkyboxUp"]="rbxassetid://159248176"
  },
  ["Winter"] = {
    ["SkyboxBk"]="rbxassetid://510645155", ["SkyboxDn"]="rbxassetid://510645130",
    ["SkyboxFt"]="rbxassetid://510645179", ["SkyboxLf"]="rbxassetid://510645117",
    ["SkyboxRt"]="rbxassetid://510645146", ["SkyboxUp"]="rbxassetid://510645195"
  },
  ["Clouded Sky"] = {
    ["SkyboxBk"]="rbxassetid://252760981", ["SkyboxDn"]="rbxassetid://252763035",
    ["SkyboxFt"]="rbxassetid://252761439", ["SkyboxLf"]="rbxassetid://252760980",
    ["SkyboxRt"]="rbxassetid://252760986", ["SkyboxUp"]="rbxassetid://252762652"
  }
}
--
local currentSky = nil
--
local function setSkybox(data)
  for face, id in pairs(data) do
    Sky[face] = id
  end
end
--
for name, data in pairs(SkyBoxes) do
  tab.newToggle(name, "Enable " .. name .. " skybox", false, function(state)
    if state then
      setSkybox(data)
      currentSky = name
    elseif currentSky == name then
      for _, face in pairs({"SkyboxBk", "SkyboxDn", "SkyboxFt", "SkyboxLf", "SkyboxRt", "SkyboxUp"}) do
        Sky[face] = ""
      end
      currentSky = nil
    end
  end)
end
-- Print the name
for _, line in ipairs({
  "█████████████",
  "█▄─▄▄─█░▄▄░▄█",
  "██─▄█▀██▀▄█▀█",
  "▀▄▄▄▄▄▀▄▄▄▄▄▀",
  "█████████████████████████████████████████████████",
  "█▄─▄─▀██▀▄─██▄─▀█▄─▄█─▄▄▄▄█████▄─▄▄─█▄─▀─▄█▄─▄▄─█",
  "██─▄─▀██─▀─███─█▄▀─██▄▄▄▄─█░░███─▄█▀██▀─▀███─▄█▀█",
  "▀▄▄▄▄▀▀▄▄▀▄▄▀▄▄▄▀▀▄▄▀▄▄▄▄▄▀▄▄▀▀▄▄▄▄▄▀▄▄█▄▄▀▄▄▄▄▄▀"
}) do
    warn(line)
end
local TextLabel = Drawing.new("Text")
TextLabel.Text = "Ez bans.exe - free - v2"
TextLabel.Size = 24
TextLabel.Center = true
TextLabel.Outline = true
TextLabel.Visible = true

local viewportSize = game:GetService("Workspace").CurrentCamera.ViewportSize
TextLabel.Position = Vector2.new(viewportSize.X / 2, 15)

local RunService = game:GetService("RunService")
local hue = 0

RunService.RenderStepped:Connect(function()
    hue = (hue + 0.01) % 1
    local color = Color3.fromHSV(hue, 1, 1)
    TextLabel.Color = color
    
    local newViewportSize = game:GetService("Workspace").CurrentCamera.ViewportSize
    TextLabel.Position = Vector2.new(newViewportSize.X / 2, 15)
end)
