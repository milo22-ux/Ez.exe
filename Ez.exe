--[[made by _milo22 on dsicord well know for making cheats and cheating on trident survival (2023) or trident survival v5 if you want to skid this cheat then pls give me credit if not then i will not be happy bit that will be fine with me i would do nothing about it anyways but i would be happy if u atleast gave me credit but if not that is complty fine btw i am 15 and taken so don't dm me to date you peace out]]--

-- Locals to call the ui
local DrRayLibrary = loadstring(game:HttpGet("https://raw.githubusercontent.com/AZYsGithub/DrRay-UI-Library/main/DrRay.lua"))()
--
local window = DrRayLibrary:Load("Ez bans.exe", "Default")
-- Combat
local tab = DrRayLibrary.newTab("Combat", "ImageIdHere")
tab.newButton("silent aim", "", function()
local modules = { ["Camera"] = {}, ["Player"] = {}, ["Character"] = {}, ["Inventory"] = {}, ["RangedWeapon"] = {}, ["BowSpecial"] = {}, ["FPS"] = {}, ["NetWork"] = {}, ["ClimbingPick"] = {}, ["BuildingTool"] = {}, ["Consumable"] = {}, ["Melee"] = {}, ["MiningDrill"] = {}, ["PlaceEntity"] = {}, ["PortableAnvil"] = {}, ["PortableWorkbench"] = {}, ["InputManager"] = {}, ["Particle"] = {}, ["Settings"] = {}, ["Sound"] = {}, ["UI"] = {}, }
for _, v in pairs(getgc(true)) do if typeof(v) == "function" and islclosure(v) then local info = debug.getinfo(v) local name = string.match(info.short_src, "%.([%w_]+)$") if name and modules[name] and info.name ~= nil then modules[name][info.name] = info.func end end end
local workspace,camera = cloneref(game:GetService("Workspace")), workspace.CurrentCamera
local UIS, RS, ReplicatedStorage = cloneref(game:GetService("UserInputService")), cloneref(game:GetService("RunService")), cloneref(game:GetService("ReplicatedStorage"))
local Fov, Sline = Drawing.new("Circle"), Drawing.new("Line")
local screenSize = camera.ViewportSize
local screenCenter = Vector2.new(screenSize.X / 2, screenSize.Y / 2)
Fov.Position = screenCenter Fov.Radius = 150 Fov.Color = Color3.fromRGB(255, 0, 255) Fov.Visible = true Sline.Color = Color3.fromRGB(255, 255, 255) Sline.Thickness = 1 Sline.Visible = true Sline.ZIndex = 1
local getclosest = function() local closestModel, closestData = nil, nil local closestMagnitude = math.huge local camera = workspace.CurrentCamera for _, v in pairs(debug.getupvalue(modules.Player.GetPlayerModel, 1) or {}) do if v.model:FindFirstChild("Head") and not v.sleeping then local pos, onScreen = camera:WorldToViewportPoint(v.model:GetPivot().Position) if onScreen then local magnitude = (Vector2.new(pos.X, pos.Y) - screenCenter).Magnitude local playerDistance = (workspace.Ignore.LocalCharacter.Middle:GetPivot().Position - v.model:GetPivot().Position).Magnitude if magnitude < Fov.Radius and playerDistance <= 9999 and magnitude < closestMagnitude then closestMagnitude = magnitude closestModel = v.model closestData = v end end end end return closestModel, closestData end
game:GetService("RunService").RenderStepped:Connect(function() getgenv().SilentTarget = getclosest() if getgenv().SilentTarget and getgenv().SilentTarget:FindFirstChild("Head") then local head_pos = getgenv().SilentTarget.Head.Position local screenPos, onScreen = camera:WorldToViewportPoint(head_pos) if onScreen then Sline.From = screenCenter Sline.To = Vector2.new(screenPos.X, screenPos.Y) Sline.Visible = true else Sline.Visible = false end else Sline.Visible = false end end)
local RunService, UserInputService, hue, speed = game:GetService("RunService"), game:GetService("UserInputService"), 0, 0.7 RunService.RenderStepped:Connect(function(dt) hue = (hue + (dt * speed * 100)) % 360 Fov.Color = Color3.fromHSV(hue / 360, 1, 1) end)  
local ProjectileDrop = function() local mod = modules.FPS.GetEquippedItem() if not mod or not mod.id then return 0, 0 end local itemConfig = require(game:GetService("ReplicatedStorage").ItemConfigs[mod.id]) return mod.id, itemConfig.ProjectileSpeed, itemConfig.ProjectileDrop end
local predict = function(p, e, s, d) local dt = (e - p).Magnitude local x = (math.pi * 2 - math.pi / 4) / 8 local t = dt / s local py = e.Y + (x * d * t) return Vector3.new(e.X, py, e.Z) end
local SilentAim = true
local oldfromOrientation; oldfromOrientation = hookfunction(CFrame.fromOrientation, newcclosure(function(p, y, r)
    if SilentAim and getgenv().SilentTarget and debug.info(3, "n") == "fire" then
        local id, speed, drop = ProjectileDrop()
        local targetHead = getgenv().SilentTarget.Head
        if targetHead then
            local origin = modules.Camera.GetCFrame()
            local Camera = game.workspace.CurrentCamera
            local cameraPosition = Camera.CFrame.Position
            local predictedPos = predict(origin.Position, targetHead.Position, speed, drop)
            if predictedPos then
                return Camera.CFrame:Inverse() * CFrame.lookAt(cameraPosition, predictedPos)
            end
        end
    end
    return oldfromOrientation(p, y, r)
end))
end)
--
tab.newToggle("Toggle hbe", "Toggle hbe (hitbox expander)", true, function(toggleState)
    Hitbox = toggleState 
end) 
tab.newSlider("hitbox size", "hitbox expander slider", 7, false, function(num)
    headsize = num
end)
--
local function modifyPlayerHeads()
    for i, v in next, game.Workspace:GetChildren() do
        if v.Name == "Model" and v:FindFirstChild("Head") then
            local head = v.Head
            if head then
                local success, _ = pcall(function()
                    head.Size = Vector3.new(headsize, headsize, headsize)
                    head.Transparency = 0.5
                end)
                if not success then
                    warn("Failed to modify head for player:", v.Name)
                end
            end
        end
    end
end
--
game:GetService("RunService").RenderStepped:Connect(function()
    if Hitbox then
        modifyPlayerHeads()
    end
end)
-- Visuals
local tab = DrRayLibrary.newTab("visuals", "ImageIdHere")
tab.newButton("esp", "", function()
    local BoxESP = {}
function BoxESP.Create(Player)
    local Box = Drawing.new("Square")
    Box.Visible = false
    Box.Color = Color3.fromRGB(194, 17, 17)
    Box.Filled = false
    Box.Transparency = 0.50
    Box.Thickness = 3
--
    local Updater
--
    local function UpdateBox()
        if Player and Player:IsA("Model") and Player:FindFirstChild("HumanoidRootPart") and Player:FindFirstChild("Head") then
            local Target2dPosition, IsVisible = workspace.CurrentCamera:WorldToViewportPoint(Player.HumanoidRootPart.Position)
            local scale_factor = 1 / (Target2dPosition.Z * math.tan(math.rad(workspace.CurrentCamera.FieldOfView * 0.5)) * 2) * 100
            local width, height = math.floor(40 * scale_factor), math.floor(62 * scale_factor)
--
            Box.Visible = IsVisible
            Box.Size = Vector2.new(width, height)
            Box.Position = Vector2.new(Target2dPosition.X - Box.Size.X / 2, Target2dPosition.Y - Box.Size.Y / 2)
        else
            Box.Visible = false
            if not Player then
                Box:Remove()
                Updater:Disconnect()
            end
        end
    end
--
    Updater = game:GetService("RunService").RenderStepped:Connect(UpdateBox)
--
    return Box
end
--
local Boxes = {}
--
local function EnableBoxESP()
    for _, Player in pairs(game:GetService("Workspace"):GetChildren()) do
        if Player:IsA("Model") and Player:FindFirstChild("HumanoidRootPart") and Player:FindFirstChild("Head") then
            local Box = BoxESP.Create(Player)
            table.insert(Boxes, Box)
        end
    end
end
--
game.Workspace.DescendantAdded:Connect(function(i)
    if i:IsA("Model") and i:FindFirstChild("HumanoidRootPart") and i:FindFirstChild("Head") then
        local Box = BoxESP.Create(i)
        table.insert(Boxes, Box)
    end
end)
--
EnableBoxESP()
tab.newButton("name and distance", "esp", function()
--name and distance esp
local modules = { ["Player"] = {} }
local ESP_Objects = {}
local cam = workspace.CurrentCamera
local uis = game:GetService("UserInputService")
local rs = game:GetService("RunService")
--
for _, v in pairs(getgc(true)) do
    if typeof(v) == "function" and islclosure(v) then
        local info = debug.getinfo(v)
        local name = string.match(info.short_src, "%.([%w_]+)$")
        if name and modules[name] and info.name then
            modules[name][info.name] = info.func
        end
    end
end
--
local function Create(className, properties)
    local success, object = pcall(Drawing.new, className)
    if not success or not object then return nil end
    for prop, value in next, properties or {} do
        pcall(function() object[prop] = value end)
    end
    return object
end
--
local function GetPlayers()
    local players = {}
    for _, v in next, debug.getupvalue(modules.Player.GetPlayerModel, 1) do
        if v and v.model and v.model:FindFirstChild("Head") and not v.sleeping then
            table.insert(players, v)
        end
    end
    return players
end
--
local function SetupESP(player)
    ESP_Objects[player.id] = Create("Text", {
        Text = ": Player :",
        Size = 17,
        Color = Color3.fromRGB(255, 255, 255),
        Outline = true,
        OutlineColor = Color3.fromRGB(0, 0, 0),
        Center = true,
        Visible = false
    })
end
--
local function HideESP(esp)
    if esp then
        esp.Visible = false
    end
end
--
local function UpdatePosition(esp, part)
    local pos, onScreen = cam:WorldToViewportPoint(part.Position)
    esp.Position = Vector2.new(pos.X, pos.Y)
    esp.Visible = onScreen
    if onScreen then
        UpdateText(esp, part)
    end
end
--
function UpdateText(esp, part)
    esp.Text = "Player [ " .. math.floor((cam.CFrame.Position - part.Position).Magnitude) .. " ]"
end
--
local function UpdateESP()
    local players = GetPlayers()
    local playerIds = {}

    for _, v in next, players do
        playerIds[v.id] = true
        if not ESP_Objects[v.id] then
            SetupESP(v)
        end
--
        local esp = ESP_Objects[v.id]
        local head = v.model:FindFirstChild("Head") or v.model:FindFirstChild("Torso")
        if head then
            UpdatePosition(esp, head)
        else
            HideESP(esp)
        end
    end
--
    for id, esp in next, ESP_Objects do
        if not playerIds[id] then
            HideESP(esp)
            ESP_Objects[id] = nil
        end
    end
end
--
rs.RenderStepped:Connect(function()
    UpdateESP()
end)
end)
-- Xray
local CurrentSliderValue = 0.5
--
tab.newSlider("xray transparency", "", 100, false, function(num)
    CurrentSliderValue = num / 100
end)
--
tab.newToggle("Xray toggle", "", false, function(toggleState)
    if toggleState then
        for i, v in pairs(game:GetService("Workspace"):GetChildren()) do
            if v:FindFirstChild("Hitbox") then
                v.Hitbox.Transparency = CurrentSliderValue
            end
        end
    else
        for i, v in pairs(game:GetService("Workspace"):GetChildren()) do
            if v:FindFirstChild("Hitbox") then
                v.Hitbox.Transparency = 0
            end
        end
    end
end)
-- fov changer
local varsglobal = {
    visuals = {
        FovChanger = false,
        FovAdd = 120,
        OldFov = workspace.CurrentCamera.FieldOfView,
        ZoomAmt = 0,
        FovZoom = false,
    },
}
--
local function updateFOV()
    if varsglobal.visuals.FovChanger then
        workspace.CurrentCamera.FieldOfView = varsglobal.visuals.OldFov + varsglobal.visuals.FovAdd
    else
        workspace.CurrentCamera.FieldOfView = varsglobal.visuals.OldFov
    end
end
--
game:GetService("RunService").RenderStepped:Connect(updateFOV)
--
tab.newToggle("Toggle fov Changer", "", true, function(toggleState)
    varsglobal.visuals.FovChanger = toggleState
    if toggleState then
        print("FOV Changer On")
    else
        print("FOV Changer Off")
    end
end)
--
tab.newSlider("Adjust fov", "", 120, true, function(value)
    varsglobal.visuals.FovAdd = value
    print("FOV Add set to: " .. value)
end)
    local tab = DrRayLibrary.newTab("visuals 2", "ImageIdHere")
--
    tab.newToggle("Military Crates Toggle", "Toggle Military Crates ESP", true, function(toggleState)
    if toggleState then
        local function onPartAdded(part)
            if part:IsA("Part") and part.BrickColor == BrickColor.new("Linen") and part.Material == Enum.Material.WoodPlanks then
                local parent = part.Parent
                if parent and parent:IsA("Model") and #parent:GetChildren() == 2 then
                    local MilitaryEsp = Instance.new("BoxHandleAdornment")
                    MilitaryEsp.Adornee = part
                    MilitaryEsp.AlwaysOnTop = true
                    MilitaryEsp.ZIndex = 0
                    MilitaryEsp.Size = part.Size
                    MilitaryEsp.Name = "MilitaryCrate"
                    MilitaryEsp.Transparency = 0.3
                    MilitaryEsp.Color = BrickColor.new("Dark Royal blue")
                    MilitaryEsp.Parent = workspace
                end
            end
        end
--
        workspace.DescendantAdded:Connect(onPartAdded)
    else
        for _, v in ipairs(workspace:GetDescendants()) do
            if v.Name == "MilitaryCrate" then
                v:Destroy()
            end
        end
    end
end)
-- 
tab.newToggle("Part Crates Toggle", "Toggle Part Crates ESP", true, function(toggleState)
    if toggleState then
        local parts = workspace:GetDescendants()
        for _, part in ipairs(parts) do
            if part:IsA("UnionOperation") and part.BrickColor == BrickColor.new("Cashmere") and part.Material == Enum.Material.Plastic then
                local PartCrateEsp = Instance.new("BoxHandleAdornment")
                PartCrateEsp.Adornee = part
                PartCrateEsp.AlwaysOnTop = true
                PartCrateEsp.ZIndex = 0
                PartCrateEsp.Size = part.Size
                PartCrateEsp.Name = "PartCrate"
                PartCrateEsp.Transparency = 0.3
                PartCrateEsp.Color = BrickColor.new("Bright yellow")
                PartCrateEsp.Parent = workspace
            end
        end
--
        local function onPartAdded(part)
            if part:IsA("UnionOperation") and part.BrickColor == BrickColor.new("Cashmere") and part.Material == Enum.Material.Plastic then
                local UpdatePartCrateEsp = Instance.new("BoxHandleAdornment")
                UpdatePartCrateEsp.Adornee = part
                UpdatePartCrateEsp.AlwaysOnTop = true
                UpdatePartCrateEsp.ZIndex = 0
                UpdatePartCrateEsp.Size = part.Size
                UpdatePartCrateEsp.Name = "PartCrate"
                UpdatePartCrateEsp.Transparency = 0.3
                UpdatePartCrateEsp.Color = BrickColor.new("Bright yellow")
                UpdatePartCrateEsp.Parent = workspace
            end
        end
--
        workspace.DescendantAdded:Connect(onPartAdded)
    else
        for _, v in ipairs(workspace:GetDescendants()) do
            if v.Name == "PartCrate" then
                v:Destroy()
            end
        end
    end
end)
--
tab.newToggle("Stone ESP Toggle", "Toggle Stone ESP", true, function(toggleState)
    if toggleState then
        local function adornStoneOre(part)
            if part:IsA("MeshPart") and part.BrickColor == BrickColor.new("Flint") and part.Material == Enum.Material.Limestone then
                local parent = part.Parent
                if parent and parent:IsA("Model") and #parent:GetChildren() == 1 then
                    local StoneEsp = Instance.new("BoxHandleAdornment")
                    StoneEsp.Adornee = part
                    StoneEsp.AlwaysOnTop = true
                    StoneEsp.ZIndex = 0
                    StoneEsp.Size = part.Size
                    StoneEsp.Name = "Stone"
                    StoneEsp.Transparency = 0.3
                    StoneEsp.Color = BrickColor.new("Grey")
                    StoneEsp.Parent = workspace
                end
            end
        end
--
        local function onPartAdded(part)
            adornStoneOre(part)
        end
--
        for _, part in ipairs(workspace:GetDescendants()) do
            adornStoneOre(part)
        end
--
        workspace.DescendantAdded:Connect(onPartAdded)
    else
        for _, v in ipairs(workspace:GetDescendants()) do
            if v.Name == "Stone" then
                v:Destroy()
            end
        end
    end
end)
--
tab.newToggle("Iron ESP Toggle", "Toggle Iron ESP", true, function(toggleState)
    if toggleState then
        local parts = workspace:GetDescendants()
        for _, part in ipairs(parts) do
            if part:IsA("MeshPart") and part.BrickColor == BrickColor.new("Burlap") and part.Material == Enum.Material.Slate then
                local IronEsp = Instance.new("BoxHandleAdornment")
                IronEsp.Adornee = part
                IronEsp.AlwaysOnTop = true
                IronEsp.ZIndex = 0
                IronEsp.Size = part.Size
                IronEsp.Name = "Iron"
                IronEsp.Transparency = 0.3
                IronEsp.Color = BrickColor.new("Burlap")
                IronEsp.Parent = workspace
            end
        end
--
        local function onPartAdded(part)
            if part:IsA("MeshPart") and part.BrickColor == BrickColor.new("Burlap") and part.Material == Enum.Material.Slate then
                local UpdateIronEsp = Instance.new("BoxHandleAdornment")
                UpdateIronEsp.Adornee = part
                UpdateIronEsp.AlwaysOnTop = true
                UpdateIronEsp.ZIndex = 0
                UpdateIronEsp.Size = part.Size
                UpdateIronEsp.Name = "Iron"
                UpdateIronEsp.Transparency = 0.3
                UpdateIronEsp.Color = BrickColor.new("Burlap")
                UpdateIronEsp.Parent = workspace
            end
        end
--
        workspace.DescendantAdded:Connect(onPartAdded)
    else
        for _, v in ipairs(workspace:GetDescendants()) do
            if v.Name == "Iron" then
                v:Destroy()
            end
        end
    end
end)
--
tab.newToggle("Nitrate ESP Toggle", "Toggle Nitrate ESP", true, function(toggleState)
    if toggleState then
        local parts = workspace:GetDescendants()
        for _, part in ipairs(parts) do
            if part:IsA("MeshPart") and part.BrickColor == BrickColor.new("Institutional white") and part.Material == Enum.Material.Slate then
                local NitrateEsp = Instance.new("BoxHandleAdornment")
                NitrateEsp.Adornee = part
                NitrateEsp.AlwaysOnTop = true
                NitrateEsp.ZIndex = 0
                NitrateEsp.Name = "Nitrate"
                NitrateEsp.Size = part.Size
                NitrateEsp.Transparency = 0.3
                NitrateEsp.Color = BrickColor.new("Institutional white")
                NitrateEsp.Parent = workspace
            end
        end
--
        local function onPartAdded(part)
            if part:IsA("MeshPart") and part.BrickColor == BrickColor.new("Institutional white") and part.Material == Enum.Material.Slate then
                local UpdateNitrateEsp = Instance.new("BoxHandleAdornment")
                UpdateNitrateEsp.Adornee = part
                UpdateNitrateEsp.AlwaysOnTop = true
                UpdateNitrateEsp.ZIndex = 0
                UpdateNitrateEsp.Size = part.Size
                UpdateNitrateEsp.Name = "Nitrate"
                UpdateNitrateEsp.Transparency = 0.3
                UpdateNitrateEsp.Color = BrickColor.new("Institutional white")
                UpdateNitrateEsp.Parent = workspace
            end
        end
--
        workspace.DescendantAdded:Connect(onPartAdded)
    else
        for _, v in ipairs(workspace:GetDescendants()) do
            if v.Name == "Nitrate" then
                v:Destroy()
            end
        end
    end
end)
-- Hitsounds
local SoundService = game:GetService("SoundService")
--
local sounds = {
    ["Default Headshot"] = "rbxassetid://9119561046",
    ["Defualt Body"] = "rbxassetid://9114487369",
    Neverlose = "rbxassetid://8726881116",
    Gamesense = "rbxassetid://4817809188",
    One = "rbxassetid://7380502345",
    Bell = "rbxassetid://6534947240",
    Rust = "rbxassetid://1255040462",
    TF2 = "rbxassetid://2868331684",
    Slime = "rbxassetid://6916371803",
    ["Among Us"] = "rbxassetid://5700183626",
    Minecraft = "rbxassetid://4018616850",
    ["CS:GO"] = "rbxassetid://6937353691",
    Saber = "rbxassetid://8415678813",
    Baimware = "rbxassetid://3124331820",
    Osu = "rbxassetid://7149255551",
    ["TF2 Critical"] = "rbxassetid://296102734",
    Bat = "rbxassetid://3333907347",
    ["Call of Duty"] = "rbxassetid://5952120301",
    Bubble = "rbxassetid://6534947588",
    Pick = "rbxassetid://1347140027",
    Pop = "rbxassetid://198598793",
    Bruh = "rbxassetid://4275842574",
    Bamboo = "rbxassetid://3769434519",
    Crowbar = "rbxassetid://546410481",
    Weeb = "rbxassetid://6442965016",
    Beep = "rbxassetid://8177256015",
    Bambi = "rbxassetid://8437203821",
    Stone = "rbxassetid://3581383408",
    ["Old Fatality"] = "rbxassetid://6607142036",
    Click = "rbxassetid://8053704437",
    Ding = "rbxassetid://7149516994",
    Snow = "rbxassetid://6455527632",
    Laser = "rbxassetid://7837461331",
    Mario = "rbxassetid://2815207981",
    Steve = "rbxassetid://4965083997",
}
local currentSound = nil
--
local function ApplySound(assetId)
    if not SoundService:FindFirstChild("PlayerHitHeadshot") then
        warn("SoundService.PlayerHitHeadshot not found!")
        return
    end
    local headshotSound = SoundService.PlayerHitHeadshot
    headshotSound.SoundId = assetId
    headshotSound.Volume = 5
    headshotSound.Pitch = 1
--
    local equalizer = headshotSound:FindFirstChildWhichIsA("EqualizerSoundEffect")
    if equalizer then
        equalizer.HighGain = -1.5
    end
end
--
local function ResetSound()
    if not SoundService:FindFirstChild("PlayerHitHeadshot") then
        return
    end
    local headshotSound = SoundService.PlayerHitHeadshot
    headshotSound.SoundId = "rbxassetid://9119561046" -- Default headshot sound
    headshotSound.Volume = 1
    headshotSound.Pitch = 1
--
    local equalizer = headshotSound:FindFirstChildWhichIsA("EqualizerSoundEffect")
    if equalizer then
        equalizer.HighGain = 0
    end
end
--
for name, assetId in pairs(sounds) do
    tab.newToggle(name, "Toggle " .. name .. " sound on/off", false, function(toggleState)
        if toggleState then
            currentSound = assetId
            ApplySound(assetId)
            print("Enabled sound:", name)
        else
            if currentSound == assetId then
                ResetSound()
                print("Reset sound back to default")
            end
        end
    end)
end
-- sky boxes
local tab = DrRayLibrary.newTab("sky box", "ImageIdHere")
local Lighting = game:GetService("Lighting")
--
local Sky = Instance.new("Sky")
Sky.Name = "CustomSky"
Sky.Parent = Lighting
--
local SkyBoxes = {
  ["Standard"] = {
    ["SkyboxBk"] = Sky.SkyboxBk, ["SkyboxDn"] = Sky.SkyboxDn,
    ["SkyboxFt"] = Sky.SkyboxFt, ["SkyboxLf"] = Sky.SkyboxLf,
    ["SkyboxRt"] = Sky.SkyboxRt, ["SkyboxUp"] = Sky.SkyboxUp
  },
  ["Among Us"] = {
    ["SkyboxBk"] = "rbxassetid://5752463190", ["SkyboxDn"] = "rbxassetid://5752463190",
    ["SkyboxFt"] = "rbxassetid://5752463190", ["SkyboxLf"] = "rbxassetid://5752463190",
    ["SkyboxRt"] = "rbxassetid://5752463190", ["SkyboxUp"] = "rbxassetid://5752463190"
  },
  ["Spongebob"] = {
    ["SkyboxBk"]="rbxassetid://277099484", ["SkyboxDn"]="rbxassetid://277099500",
    ["SkyboxFt"]="rbxassetid://277099554", ["SkyboxLf"]="rbxassetid://277099531",
    ["SkyboxRt"]="rbxassetid://277099589", ["SkyboxUp"]="rbxassetid://277101591"
  },
  ["Deep Space"] = {
    ["SkyboxBk"]="rbxassetid://159248188", ["SkyboxDn"]="rbxassetid://159248183",
    ["SkyboxFt"]="rbxassetid://159248187", ["SkyboxLf"]="rbxassetid://159248173",
    ["SkyboxRt"]="rbxassetid://159248192", ["SkyboxUp"]="rbxassetid://159248176"
  },
  ["Winter"] = {
    ["SkyboxBk"]="rbxassetid://510645155", ["SkyboxDn"]="rbxassetid://510645130",
    ["SkyboxFt"]="rbxassetid://510645179", ["SkyboxLf"]="rbxassetid://510645117",
    ["SkyboxRt"]="rbxassetid://510645146", ["SkyboxUp"]="rbxassetid://510645195"
  },
  ["Clouded Sky"] = {
    ["SkyboxBk"]="rbxassetid://252760981", ["SkyboxDn"]="rbxassetid://252763035",
    ["SkyboxFt"]="rbxassetid://252761439", ["SkyboxLf"]="rbxassetid://252760980",
    ["SkyboxRt"]="rbxassetid://252760986", ["SkyboxUp"]="rbxassetid://252762652"
  }
}
--
local currentSky = nil
--
local function setSkybox(data)
  for face, id in pairs(data) do
    Sky[face] = id
  end
end
--
for name, data in pairs(SkyBoxes) do
  tab.newToggle(name, "Enable " .. name .. " skybox", false, function(state)
    if state then
      setSkybox(data)
      currentSky = name
    elseif currentSky == name then
      for _, face in pairs({"SkyboxBk", "SkyboxDn", "SkyboxFt", "SkyboxLf", "SkyboxRt", "SkyboxUp"}) do
        Sky[face] = ""
      end
      currentSky = nil
    end
  end)
end
-- Print the name and text label
local CustomTopText = Drawing.new("Text")
CustomTopText.Text = "                                                         Ez bans.exe[Public] - https://discord.gg/nUPQCZhv8g"
CustomTopText.Visible = true
CustomTopText.Transparency = 1
CustomTopText.Size = 15
CustomTopText.Outline = true
CustomTopText.Center = true
CustomTopText.Font = 3
CustomTopText.Color = Color3.fromRGB(255, 255, 255)
CustomTopText.Position = Vector2.new(Camera.ViewportSize.X / 1.8, 0)
--
for _, line in ipairs({
  "█████████████",
  "█▄─▄▄─█░▄▄░▄█",
  "██─▄█▀██▀▄█▀█",
  "▀▄▄▄▄▄▀▄▄▄▄▄▀",
  "█████████████████████████████████████████████████",
  "█▄─▄─▀██▀▄─██▄─▀█▄─▄█─▄▄▄▄█████▄─▄▄─█▄─▀─▄█▄─▄▄─█",
  "██─▄─▀██─▀─███─█▄▀─██▄▄▄▄─█░░███─▄█▀██▀─▀███─▄█▀█",
  "▀▄▄▄▄▀▀▄▄▀▄▄▀▄▄▄▀▀▄▄▀▄▄▄▄▄▀▄▄▀▀▄▄▄▄▄▀▄▄█▄▄▀▄▄▄▄▄▀"
}) do
    warn(line)
end
