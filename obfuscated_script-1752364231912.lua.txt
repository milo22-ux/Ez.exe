local key = getgenv().key or ""
local hwid = gethwid()
local request = request or http_request or (http and http.request) or syn and syn.request
if type(request) ~= "function" then error("Invalid request function") end

local function antiTamper()
    if hookfunction or hookmetamethod or oldhook then error("Tampering") end
    if not debug or not debug.getinfo or not debug.gethook then error("Debug missing") end
    if debug.gethook() then error("Debug hook active") end

    local function checkMeta(t)
        local mt = getrawmetatable(t)
        if not mt then return end
        if mt.__index and type(mt.__index) ~= "table" then error("__index hook") end
        if mt.__newindex and type(mt.__newindex) ~= "table" then error("__newindex hook") end
        if mt.__namecall and debug.getinfo(mt.__namecall, "S").what ~= "C" then error("__namecall hook") end
        if mt.__metatable ~= nil then error("Locked metatable") end
    end

    checkMeta(game)
    checkMeta(game.Players)
    checkMeta(game.ReplicatedStorage)

    local funcs = {
        pcall, xpcall, coroutine.create, coroutine.resume, coroutine.running,
        coroutine.status, coroutine.wrap, loadstring, load, getfenv,
        setfenv, getrawmetatable, setreadonly, tostring, tonumber, type
    }

    for _, f in pairs(funcs) do
        if type(f) ~= "function" then error("Function tampered") end
    end

    if type(game.HttpGet) ~= "function" then error("HttpGet tampered") end

    for i = 1, 25 do
        local info = debug.getinfo(i)
        if not info then break end
        if info.what ~= "Lua" and info.what ~= "C" then error("Stack injection") end
    end

    local env = getfenv(0)
    if env._G ~= _G then error("Global env modified") end
end

antiTamper()

local url = ("https://whitelist-ivp4.vercel.app/api/vaildate?key=%s&hwid=%s"):format(key, hwid)
local r = request({ Url = url, Method = "GET" })
if r and r.Body then
    print(r.Body)
else
    error("Validation failed")
end
